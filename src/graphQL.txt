



// //book schema for graphQL
// function bookSchema () {
// var bookType =  GraphQLObjectType({
//   name: 'book',
//   fields: function () {
//     return {
//       _id: {
//         type: GraphQLString
//       },
//       isbn: {
//         type: GraphQLString
//       },
//       title: {
//         type: GraphQLString
//       },
//       author: {
//         type: GraphQLString
//       },
//       description: {
//         type: GraphQLString
//       },
//       published_year: {
//         type: GraphQLInt
//       },
//       publisher: {
//         type: GraphQLString
//       },
//       updated_date: {
//         type: GraphQLDate
//       }
//     }
//   }
// });

// //

// var queryType =  GraphQLObjectType({
//   name: 'Query',
//   fields:  function () {
//     return {
//       books: {
//         type:  GraphQLList(bookType),
//         resolve:async function () {
//           const books = await bookInfo.find().exec()
//           if (!books) {
//             throw  Error('Error')
//           }
//           return books
//         }
//       },
//       book: {
//         type: bookType,
//         args: {
//           id: {
//             name: '_id',
//             type: GraphQLString
//           }
//         },
//         resolve: async function (root, params) {
//           const bookDetails = await bookInfo.findById(params.id).exec();
//           if (!bookDetails) {
//             throw  Error('Error')
//           }
//           return bookDetails
//         }
//       } 
//     }
//   }
// });


// var mutation =  GraphQLObjectType({
//   name: 'Mutation',
//   fields: function () {
//     return {
//       //add book 
//       addBook: {
//         type: bookType,
//         args: {
//           isbn: {
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           title: {
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           author: {
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           description: {
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           published_year: {
//             type:  GraphQLNonNull(GraphQLInt)
//           },
//           publisher: {
//             type:  GraphQLNonNull(GraphQLString)
//           }
//         },
//         resolve: async function  (root, params) {
//           const bookModel =   bookInfo(params);
//           const Book = await  bookModel.save();
//           if (!Book) {
//             throw  Error('Error');
//           }
//           return Book
//         }
//       },
// //update 
//       updateBook: {
//         type: bookType,
//         args: {
//           id: {
//             name: 'id',
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           isbn: {
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           title: {
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           author: {
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           description: {
//             type:  GraphQLNonNull(GraphQLString)
//           },
//           published_year: {
//             type:  GraphQLNonNull(GraphQLInt)
//           },
//           publisher: {
//             type:  GraphQLNonNull(GraphQLString)
//           }
//         },
//         resolve: async function (root, params) {
//           await bookInfo.findByIdAndUpdate(params.id, { isbn: params.isbn, title: params.title, author: params.author, description: params.description, published_year: params.published_year, publisher: params.publisher, updated_date:  Date() }, function (err) {
//             if (err) return next(err);
//           });
//         }
//       },
// //remove book 
//       removeBook: {
//         type: bookType,
//         args: {
//           id: {
//             type:  GraphQLNonNull(GraphQLString)
//           }
//         },
//         resolve:async function(root, params) {
//           const remBook = await bookInfo.findByIdAndRemove(params.id).exec();
//           if (!remBook) {
//             throw  Error('Error')
//           }
//           return remBook;
//         }
//       } ,
     

//     }
//   }
// });
// return   GraphQLSchema({query:queryType, mutation: mutation });  ;
// }
// //>>------------------>>---------->> schema end 

// //graphQL connectin 
// const bookSchemaGet = bookSchema() ;
// app.use('/books', cors(), graphqlHTTP({
//   schema: bookSchemaGet,
//   rootValue: global,
//   graphiql: true,
// }));




// var paginationType =  GraphQLObjectType({
//   name: 'bookQuery',
//   fields: function () {
//     return {
//       page: {
//         type: GraphQLString
//       },
//       size: {
//         type: GraphQLString
//       }
   
//     }
//   }
//   });
  
//   var paginationQuery =  GraphQLObjectType({
//   name: 'paginationQuery',
//   fields:  function () {
//     return {
//       booksQuery: {
//         type:  GraphQLList(paginationType),
//         resolve:async function () {
//           const data = await bookInfo.find();
//           if (!data) {
//             throw  Error('Error')
//           }
//           return data
//         }
//       },
    
//     }
//     }
//     }) ;
  
//     var paginationMutaion =  GraphQLObjectType({
//       name: 'mutation',
//       fields: function () {
//         return {
//           booksQuery: {
//             type: paginationType,
//             args: {
//               page: {
//                 type:  GraphQLNonNull(GraphQLString)
//               },
//               size: {
//                 type:  GraphQLNonNull(GraphQLString)
//               }
//             },
//             resolve: async function  (root, params) {
//               const page = parseInt(params.page);
//               const size = parseInt(params.size);
//               console.log("books params ==>" , params);
//               // ----> parametar  <---- //
//               const count = await bookInfo.estimatedDocumentCount();
//               const data = await bookInfo.find().skip(page * size).limit(size).sort({_id: -1 }).toArray();
//               const paginationData = { count, data } ;
  
//               if (!paginationData) {
//                 throw  Error('Error');
//               }
//               return paginationData
//             }
//           },
//         }}}) ;

